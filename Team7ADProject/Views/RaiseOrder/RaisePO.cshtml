@model Team7ADProject.ViewModels.RaisePOViewModel

@{
    /**/

    ViewBag.Title = "Raise PO";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
}

    <div class="custcontainer">

                    <h2>Raise Purchase Order</h2>

        <p> @Html.ActionLink("Back to List", "Index")</p>
        <form id="NewPurchaseOrderForm">

            <table>
                <tr>
                    <td width="9%">Category</td>
                    <td width="40%">
                        <select class="form-control" name="category" id="category"></select>
                    </td>
                    <td></td>
                    <td width="9%">Price</td>
                    <td width="30%">
                        <input type="text" id="unitprice" readonly="readonly" class="form-control" name="unitprice">
                    </td>
                    <td></td>
                </tr>

                <tr>
                    <td>Item</td>
                    <td>
                        <select class="form-control table2" name="description" id="description"></select>
                    </td>
                    <td></td>
                    <td>Quantity</td>
                    <td>
                        <input type="number" id="quantity" name="quantity" data-val="true" placeholder="quantity" class="form-control" min="1" re />
                        @*@Html.TextBoxFor(m => m.Quantity, new { @class = "form-control", @type = "number", @min = "1", @max = Int32.MaxValue, @step = "1", @value = "0", @id = "quantity", @name = "quantity" })*@
                        @*<input class="form-control input-validation-error" data-val="true" data-val-number="The field Quantity must be a number." data-val-regex="Please enter a valid quantity." data-val-regex-pattern="^\d+" data-val-required="The Quantity field is required." id="quantity" min="1" name="Quantity" step="1" type="number" value="0" aria-describedby="quantity-error" aria-invalid="true">*@

                        @Html.ValidationMessageFor(m => m.Quantity)
                    </td>
                    <td>
                        <input type="text" id="uom" readonly="readonly" class="form-control" name="uom">
                    </td>
                </tr>

                <tr>
                    <td>Supplier</td>
                    <td>
                        <select class="form-control" name="suppliername" id="suppliername"></select>
                    </td>
                    <td></td>
                    <td></td>
                    <td><a id="addToList">Add To List</a> </td>
                </tr>
            </table>

            <div>
                <table id="detailsTable" class="table">
                    <thead>
                        <tr>
                            <th style="width:20%">Product</th>
                            <th style="width:20%">Supplier</th>
                            <th style="width:15%">Quantity</th>
                            <th style="width:15%">Amount</th>
                            <th style="width:10%"></th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <div class="modal-footer">
                <button type="reset" class="redBtn" data-dismiss="modal">Reset</button>
                <button id="saveOrder" type="submit" class="greenBtn">Raise Order</button>
            </div>
        </form>
    </div>
@section scripts
{
    <script>
        var $dropdown1 = $("select[name='category']");
        var $dropdown2 = $("select[name='description']");
        var $dropdown3 = $("select[name='suppliername']");
        var $textboxquantity = $("select[name='quantity']");
        var $priceInput = $("input[name='unitprice']");
        loadItem();

        function loadItem() {
            $dropdown1.empty();
            $dropdown2.empty();
            $dropdown3.empty();
            $dropdown1.append('<option>Select Category</option>');
            $dropdown2.append('<option>Select Item</option>');
            $dropdown3.append('<option>Select Supplier</option>');
            $dropdown1.prop('selectedIndex', 0);
            $dropdown2.prop('selectedIndex', 0);
            $dropdown3.prop('selectedIndex', 0);

            $.ajax({
                url: '../api/stationeries/categories/',
                type: 'GET',
                dataType: 'json',
                success: function (json) {
                    $.each(json, function (i, value) {
                        $dropdown1.append($('<option>').text(value).attr('value', value));
                    });
                }
            });
        }

        //load 2nd list
        $dropdown1.change(function () {
            $dropdown2.empty();
            $dropdown2.append('<option>Select Item</option>');
            $.ajax({
                url: '../api/stationeries/categories/' + $dropdown1.val(),
                type: 'GET',
                dataType: 'json',
                success: function (json) {
                    $.each(json, function (i, value) {
                        $dropdown2.append('<option value="' + value.Id + '">' + value.ItemDescription + '</option>');
                    });
                }
            });
        });

        //load suppliers and price
        $dropdown2.change(function () {
            $dropdown3.empty();
            $dropdown3.append('<option>Select Supplier</option>');
            $.ajax({
                url: '../api/stationeries/categories/items/' + $dropdown2.val(),
                type: 'GET',
                dataType: 'json',
                success: function (json) {
                    $.each(json, function (i, value) {
                        $dropdown3.append('<option data-price="' + value.Price + '" value="' + value.Id + '">' + value.Supplier + " (S$ " + value.Price + ")" + '</option>');
                    });
                }
            });
        });

        //load unit of measure
        $dropdown2.change(function () {
            $.ajax({
                url: '../api/stationeries/item/' + $dropdown2.val(),
                type: 'GET',
                dataType: 'json',
                success: function (json) {
                    $("#uom").val(json);
                }
            });
        });

        // load price in unit price box
        $dropdown3.change(function () {
            var selectedOption = $dropdown3.find(':selected');
            if (selectedOption.length) {
                var price = selectedOption.data('price');
                $priceInput.val(price);
            }
        });


        //add items to the details table

        $("#addToList").click(function (e) {
            e.preventDefault();

            if ($.trim($("#unitprice").val()) == "" || $.trim($("#quantity").val()) == "" ||
                $.trim($("#category").val()) == "Select Category" || $.trim($dropdown2.val()) == "Select Item" ||
                $.trim($dropdown3.val()) == "Select Supplier" || $.trim($dropdown3.val()) == "") {
                bootbox.alert("Error! Please confirm the selections!");
                return;
            }

            if ($.trim($("#quantity").val()) < 1) {
                bootbox.alert("Error! Please select the valid quantity!");
                return;
            }

            var category = $("#category").val(),
                description = $("#description").val(),
                supplier = $("#suppliername").val(),
                price = $("#unitprice").val(),
                quantity = $("#quantity").val(),
                itemname = $("#description option:selected").text(),
                suppliername = $("#suppliername option:selected").text(),
                amount = (parseFloat(price) * parseInt(quantity)).toFixed(2),
                detailsTableBody = $("#detailsTable tbody");

            var productItem = '<tr><td style="display: none;">' + description + '</td><td>' + itemname + '</td><td style="display: none;">' + supplier + '</td><td>' + suppliername +
                '</td><td style="display: none;">' + price + '</td><td>' + quantity + '</td><td>' + amount + " SGD" +
                '</td><td><a data-itemId="0" href="#" class="deleteItem">Remove</a></td></tr>';
            detailsTableBody.append(productItem);
            clearItem();
        });

        //Reset
        function clearItem() {

            $dropdown1.empty();
            $dropdown2.empty();
            $dropdown3.empty();
            $('#quantity').val('1');
            $dropdown1.append('<option>Select Category</option>');
            $dropdown2.append('<option>Select Item</option>');
            $dropdown2.append('<option>Select Supplier</option>');
            $dropdown1.prop('selectedIndex', 0);
            $dropdown2.prop('selectedIndex', 0);
            $dropdown3.prop('selectedIndex', 0)
            $.ajax({
                url: '../api/stationeries/categories/',
                type: 'GET',
                //data: 'q=' + str,
                dataType: 'json',
                success: function (json) {
                    $.each(json, function (i, value) {
                        $dropdown1.append($('<option>').text(value).attr('value', value));

                    });
                }
            });
        }

        // Remove an item from the table
        $(document).on('click', 'a.deleteItem', function (e) {
            e.preventDefault();
            var $self = $(this);
            if ($(this).attr('data-itemId') == "0") {
                $(this).parents('tr').css("background-color", "#ff6347").fadeOut(800, function () {
                    $(this).remove();
                });
            }
        });

        // Pass data to controller
        function saveOrder(data) {
            return $.ajax({
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                type: 'POST',
                url: "Save",
                data: data,
                success: function (result) {
                    alert(result);
                    location.reload();
                },
                error: function () {
                    bootbox.alert("Error! Please check the items!");
                }
            });
        }

        $("#saveOrder").click(function (e) {
            e.preventDefault();

            var orderArr = [];
            orderArr.length = 0;

            $.each($("#detailsTable tbody tr"), function () {
                orderArr.push({
                    description: $(this).find('td:eq(0)').html(),
                    supplierid: $(this).find('td:eq(2)').html(),
                    unitprice: $(this).find('td:eq(4)').html(),
                    quantity: $(this).find('td:eq(5)').html()

                });
            });


            var data = JSON.stringify({
                poModel: orderArr
            });

            $.when(saveOrder(data)).then(function (response) {
                console.log(response);
            }).fail(function (err) {
                console.log(err);
            });
        });

    </script>
}

